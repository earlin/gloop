// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, GameLoop, create, raf,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  raf = require('raf');

  GameLoop = (function(_super) {
    __extends(GameLoop, _super);

    GameLoop.defaults = {
      timeScale: 1,
      ticksPerSecond: 120
    };

    function GameLoop(properties) {
      var _ref, _ref1;
      this.timeScale = (_ref = properties != null ? properties.timeScale : void 0) != null ? _ref : GameLoop.defaults.timeScale;
      this.ticksPerSecond = (_ref1 = properties != null ? properties.ticksPerSecond : void 0) != null ? _ref1 : GameLoop.defaults.ticksPerSecond;
      this.dt = 1000 / this.ticksPerSecond;
      this.__accum = 0;
    }

    GameLoop.prototype.start = function() {
      var run;
      this.emit('start');
      run = (function(_this) {
        return function() {
          _this._loop();
          return _this._handle = raf(run);
        };
      })(this);
      return this._handle = raf(run);
    };

    GameLoop.prototype.stop = function() {
      this.emit('stop');
      return raf.cancel(this._handle);
    };

    GameLoop.prototype._loop = function() {
      var count, delta, now;
      now = Date.now();
      if (this.__lastCall == null) {
        this.__lastCall = now;
      }
      delta = now - this.__lastCall;
      count = 0;
      this.__lastCall = now;
      this.__accum = Math.min((this.dt / this.timeScale) * 10, this.__accum + delta);
      while ((this.__accum >= this.dt / this.timeScale) && count < 20) {
        count += 1;
        this.emit('tick', this.dt);
        this.__accum -= this.dt / this.timeScale;
      }
      return this.emit('draw', (1 - this.__accum / this.dt / this.timeScale) / 1000);
    };

    return GameLoop;

  })(EventEmitter);

  create = function(properties) {
    return new GameLoop(properties);
  };

  module.exports = create;

}).call(this);
